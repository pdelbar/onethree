<?php
/**
 * One_Form_Constraint handles validation rules an attribute must comply to
 *


  * @TODO review this file and clean up historical code/comments
ONEDISCLAIMER

 **/
Class One_Form_Constraint
{
	/**
	 * @var One_Form_Widget_Abstract $_widget The widget the constraint applies to
	 */
	private $_widget;

	/**
	 * @var array List of constraints
	 */
	private $_constraints = array();

	/**
	 * @var array List of errors generated by the widget not complying to the constraints
	 */
	private $_errors      = array();

	/**
	 * @var int N Not
	 */
	const N = 1;

	/**
	 * @var int E Equal
	 */
	const E = 2;

	/**
	 * @var int L Less than
	 */
	const L = 4;

	/**
	 * @var int G Greater than
	 */
	const G = 8;

	/**
	 * @var int R Regexp
	 */
	const R = 16;

	/**
	 * @var int M Check mail
	 */
	const M = 32;

	/**
	 * @var int C Custom constraint
	 */
	const C = 64;

	/**
	 * Class constructor
	 *
	 * @param One_Form_Widget_Abstract $widget
	 */
	public function __construct(One_Form_Widget_Abstract $widget)
	{
		$this->setWidget($widget);
	}

	/**
	 * Add constraints to the widget
	 *
	 * @param mixed $to
	 * @param int $type
	 * @param mixed $value
	 */
	public function addConstraint($type, $value, $error)
	{
		$constraint        = new stdClass();
		$constraint->type  = $type;
		$constraint->value = $value;
		$constraint->error = $error;

		$this->_constraints[] = $constraint;
	}

	/**
	 * Returns true if all constraints are met, otherwise returns false
	 *
	 * @return boolean
	 */
	public function checkConstraints()
	{
		$checksOut = true;

		if(count($this->_constraints) > 0)
		{
			foreach($this->_constraints as $constraint)
			{
				$check = $this->checkConstraint($constraint);

				if($constraint->type & 1)
					$check = !$check;

				if(!$check)
				{
					$checksOut = false;
					if(trim($constraint->error) != '')
						$this->_errors[] = $constraint->error; // removed the field-label since most of the time it's not clean and the fieldname can be given in the error message
					else
						$this->_errors[] = '"'.$this->getWidget()->getLabel().'": '.$constraint->type.' '.$constraint->value;
				}
			}
		}

		return $checksOut;
	}

	/**
	 * Returns true if this constraint is met, otherwise returns false
	 *
	 * @param object $constraint
	 * @return boolean
	 */
	private function checkConstraint($constraint)
	{
		$widget = $this->getWidget();
		$type = $widget->getType();
		$value = $widget->requestValue();

		$checkedOut = false;
		if($type == 'int' || $type == 'decimal' || $type == 'boolean')
		{
			$checkedOut = $this->checkNumeric($value, $constraint);
		}
		elseif($type == 'time' || $type == 'date' || $type == 'datetime')
		{
			$checkedOut = $this->checkDatetime($value, $type, $constraint);
		}
		else
		{
			$checkedOut = $this->checkString($value, $constraint);
		}

		$regex = true;
		if($constraint->type & 16)
		{
			$regex = (preg_match($constraint->value, $value) > 0);
		}

		$mail = true;
		if($constraint->type & 32 && '' != trim($value))
		{
			if(filter_var($value, FILTER_VALIDATE_EMAIL) === false || preg_match('/\.[a-z0-9\-\_]{2,4}$/i', $value) == 0) {
				$mail = false;
			}
		}

		$custom = true;
		if($constraint->type & 64)
		{
			$conditionName  = 'One_Permission_Rule_'.ucfirst(strtolower($constraint->value));
			$condition      = new $conditionName();
			$custom         = $condition->authorize(array('widget' => $widget, 'type' => $type, 'value' => $value));
		}

		$required = true;
		if($widget->isRequired() && trim($value) == '')
			$required = false;

		return ($checkedOut && $regex && $mail && $custom && $required);
	}

	/**
	 * Check constraints against a numeric value
	 *
	 * @param mixed $value
	 * @param object $constraint
	 * @return boolean
	 */
	private function checkNumeric($value, $constraint)
	{
		if($constraint->type & 2)
		{
			if($constraint->type & 4)
				return ($value <= $constraint->value);
			elseif($constraint->type & 8)
				return ($value >= $constraint->value);
			else
				return ($value == $constraint->value);
		}
		elseif($constraint->type & 4)
			return ($value < $constraint->value);
		elseif($constraint->type & 8)
			return ($value > $constraint->value);

		return true;
	}

	/**
	 * Check constraints against a datetime value
	 *
	 * @param mixed $value
	 * @param object $constraint
	 * @return boolean
	 */
	private function checkDatetime($value, $type, $constraint)
	{
		$date = false;
		switch($type)
		{
			case 'time':
				if(preg_match('/^(\d{2}):(\d{2})(:(\d{2}))?$/' ,$value, $matches) > 0)
					$date = mktime($matches[1], $matches[2], $matches[3], 1, 1, 1970);
				break;
			case 'date':
				if(preg_match('/^(\d{4})-(\d{2})-(\d{2})$/' ,$value, $matches) > 0)
					$date = mktime(0, 0, 0, $matches[2], $matches[3], $matches[1]);
				break;
			case 'datetime':
				if(preg_match('/^(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2})(:(\d{2}))?$/' ,$value, $matches) > 0)
					$date = mktime($matches[4], $matches[5], $matches[6], $matches[2], $matches[3], $matches[1]);
				break;
			default:
				return false;
				break;
		}

		if(!$date)
			return false;

		if($constraint->type & 2)
		{
			if($constraint->type & 4)
				return ($date <= $constraint->value);
			elseif($constraint->type & 8)
				return ($date >= $constraint->value);
			else
				return ($date == $constraint->value);
		}
		elseif($constraint->type & 4)
			return ($date < $constraint->value);
		elseif($constraint->type & 8)
			return ($date > $constraint->value);

		return true;
	}

	/**
	 * Check constraints against a string value
	 *
	 * @param mixed $value
	 * @param object $constraint
	 * @return boolean
	 */
	private function checkString($value, $constraint)
	{
		if($constraint->type & 2)
		{
			if($constraint->type & 4)
				return (strcmp($value, $constraint->value) <= 0);
			elseif($constraint->type & 8)
				return (strcmp($value, $constraint->value) >= 0);
			else
			{
				return (strcmp($value, $constraint->value) == 0);
			}
		}
		elseif($constraint->type & 4)
			return (strcmp($value, $constraint->value) < 0);
		elseif($constraint->type & 8)
			return (strcmp($value, $constraint->value) > 0);
		elseif($constraint->type & 32)
			return (filter_var($value, FILTER_VALIDATE_EMAIL) || '' == trim($value));

		return true;
	}

	/**
	 * Get the widget this constraint is about
	 *
	 * @return One_Form_Widget_Abstract
	 */
	public function getWidget()
	{
		return $this->_widget;
	}

	/**
	 * Get any possible errors
	 *
	 * @return array
	 */
	public function getErrors()
	{
		return $this->_errors;
	}

	/**
	 * Get the widget this constraint is about
	 *
	 * @param One_Form_Widget_Abstract $widget
	 */
	private function setWidget(One_Form_Widget_Abstract $widget)
	{
		$this->_widget = $widget;
	}

	/**
	 * Add an error
	 *
	 * @param string $error
	 */
	public function addError($error)
	{
		$this->_errors[] = $error;
	}
}
